/**
 * File system utilities for VibeCoding Logger
 *
 * Handles file operations with thread safety and error handling,
 * similar to Python implementation but using Node.js patterns
 */
import { FileOperationResult } from '../types.js';
/**
 * Thread-safe file operations manager
 */
export declare class FileSystemManager {
    private static writeQueues;
    /**
     * Ensure directory exists, creating it if necessary
     */
    static ensureDirectory(filePath: string): Promise<void>;
    /**
     * Check if file exists
     */
    static fileExists(filePath: string): Promise<boolean>;
    /**
     * Get file size in MB
     */
    static getFileSizeMb(filePath: string): Promise<number>;
    /**
     * Append text to file with thread safety
     * Uses a queue per file to prevent concurrent writes
     */
    static appendToFile(filePath: string, content: string): Promise<FileOperationResult>;
    /**
     * Rotate log file if it exceeds size limit
     */
    static rotateFileIfNeeded(filePath: string, maxSizeMb: number): Promise<FileOperationResult>;
    /**
     * Write entire content to file (for batch operations)
     */
    static writeFile(filePath: string, content: string): Promise<FileOperationResult>;
    /**
     * Read entire file content
     */
    static readFile(filePath: string): Promise<{
        success: boolean;
        content?: string;
        error?: string;
    }>;
    /**
     * Read file line by line (for loading existing logs)
     */
    static readFileLines(filePath: string): AsyncGenerator<string, void, unknown>;
    /**
     * Clean up completed write queues (for memory management)
     */
    static clearCompletedQueues(): void;
}
//# sourceMappingURL=fileSystem.d.ts.map